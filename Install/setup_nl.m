function setup_nl()

fprintf('First select the SOURCE folder.\nThis is the (Google Drive) folder that contains the master code of the PICKA. It should be called "PICKA Experiments".\n(Press Enter to continue)\n\n');
pause();

src = uigetdir(fullfile(getHome(), 'Google Drive'), 'PICKA installation: Source directory (Google Drive)');

if src(1)==0
    error('No source folder was selected');
end

fprintf('Source folder: %s\n\n', src);

fprintf('Then select the DESTINATION folder.\nNo new "PICKA Experiments" folder will be created. All the code will be installed directly in the selected folder.\n');
fprintf('This is where you will be running your experiments from.\n(Press Enter to continue)\n\n');
pause();

dst = uigetdir(pwd(),'PICKA installation: Destination directory');

if dst(1)==0
    error('No destination folder was selected');
end

fprintf('Destination folder: %s\n\n', dst);

fprintf('Are you sure you want to install from the source to the destination folder?\n');
r = input('yes | no: ', 's');

r = lower(r(1));

switch r
    case 'y'
        if ~exist('manage_picka.py', 'file')
            py_code = base64decode(payload());
            f = fopen('manage_picka.py', 'w');
            fwrite(f,py_code);
            fclose(f);
        end
        %[c, ~] = system(sprintf('python ./manage_picka.py install "%s" "%s"', src, dst), '-echo');
        mod = py.importlib.import_module('manage_picka');
        py.reload(mod);
        py.manage_picka.main(py.list({'install', src, dst}));
    otherwise
        fprintf('\nInstallation aborted.\n');
end
%------------------------------------------
function home = getHome()
% return the path to the home folder indepently of OS (e.g. works in Linux,
% apple, and windows)
 
if ispc
    home = fullfile(getenv('HOMEDRIVE'), getenv('HOMEPATH'));
else
    home = getenv('HOME');
end

%------------------------------------------
function y = base64decode(x)

x = uint8(x(:));

base64 = org.apache.commons.codec.binary.Base64;
y = base64.decode(x);
y = char(mod(int16(y),256))';

%------------------------------------------
% The function below is generated by calling
%   python make_setup.py setup_nl.m manage_picka.py
% Do not edit manually.
function x = payload()

x = 'IyEvdXNyL2Jpbi9lbnYgcHl0aG9uCiMtKi0gY29kaW5nOiB1dGYtOCAtKi0KCmltcG9ydCBzaHV0aWwsIG9zLCBzeXMsIHppcGZpbGUsIHRpbWUsIHNvY2tldCwgZm5tYXRjaAoKIyBJZiB3ZSB3YW50IHRvIGNvcHkgdG8gYSB6aXAgZmlsZQpjbGFzcyBhcmNoaXZlX3ppcDoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB6aXBfZmlsZW5hbWUsIHBhdGhfbWFuZ2xlKToKICAgICAgICBzZWxmLl9maWxlID0gemlwZmlsZS5aaXBGaWxlKHppcF9maWxlbmFtZSwgJ3cnLCB6aXBmaWxlLlpJUF9ERUZMQVRFRCkKICAgICAgICBzZWxmLnBhdGhfbWFuZ2xlID0gcGF0aF9tYW5nbGUgIyBXZSB3aWxsIG1hbmdsZSB0aGF0IHdoZW4gc3RvcmluZyBmaWxlcwoKICAgIGRlZiBhZGQoc2VsZiwgZmlsZW5hbWUpOgogICAgICAgIHNlbGYuX2ZpbGUud3JpdGUoZmlsZW5hbWUsIGZpbGVuYW1lLnJlcGxhY2Uoc2VsZi5wYXRoX21hbmdsZSwgJycsIDEpKQoKICAgIGRlZiBjbG9zZShzZWxmKToKICAgICAgICBzZWxmLl9maWxlLmNsb3NlKCkKCiMgSWYgd2Ugd2FudCB0byBjb3B5IHRvIGEgZm9sZGVyCmNsYXNzIGFyY2hpdmVfZm9sZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGZvbGRlcm5hbWUsIHBhdGhfbWFuZ2xlKToKICAgICAgICBzZWxmLmZvbGRlcm5hbWUgPSBmb2xkZXJuYW1lCiAgICAgICAgc2VsZi5wYXRoX21hbmdsZSA9IHBhdGhfbWFuZ2xlCgogICAgZGVmIGFkZChzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgZHN0ID0gb3MucGF0aC5qb2luKHNlbGYuZm9sZGVybmFtZSwgZmlsZW5hbWUucmVwbGFjZShvcy5wYXRoLmpvaW4oc2VsZi5wYXRoX21hbmdsZSwnJyksICcnLCAxKSkKICAgICAgICBwLCBmID0gb3MucGF0aC5zcGxpdChkc3QpCiAgICAgICAgaWYgbm90IG9zLnBhdGguaXNkaXIocCk6CiAgICAgICAgICAgIG9zLm1ha2VkaXJzKHApCiAgICAgICAgc2h1dGlsLmNvcHkyKGZpbGVuYW1lLCBkc3QpCgogICAgZGVmIGNsb3NlKHNlbGYpOgogICAgICAgIHBhc3MKCmRlZiBzbmFwc2hvdChpbnN0YWxsX2Rpciwgc25hcHNob3RfZGlyLCBjb2RlX29ubHk9VHJ1ZSwgY29tcHJlc3M9VHJ1ZSk6CiAgICAjIGluc3RhbGxfZGlyIGlzIHRoZSBwYXRoIG9mIHRoZSBpbnN0YWxsYXRpb24gd2Ugd2FudCBhIHNuYXBzaG90IG9mCiAgICAjIHNuYXBzaG90X2RpciBpcyB3aGVyZSB3ZSB3YW50IHRoZSBzbmFwc2hvdCBzdG9yZWQ7IHRoaXMgaXMgYSB0b3AgZGlyZWN0b3J5LCB0aGUgZXhhY3QgdGFyZ2V0IG5hbWUgd2lsbCBiZSBnZW5lcmF0ZWQKICAgIGlmIGNvbXByZXNzOgogICAgICAgIHppcF9maWxlbmFtZSA9IG9zLnBhdGguam9pbihzbmFwc2hvdF9kaXIsICIlc18lcy56aXAiICUgKHRpbWUuc3RyZnRpbWUoIiVZLSVtLSVkXyVIJU0lUyIpLCBzb2NrZXQuZ2V0aG9zdG5hbWUoKSkpCiAgICAgICAgZHN0ID0gYXJjaGl2ZV96aXAoemlwX2ZpbGVuYW1lLCBpbnN0YWxsX2RpcikKICAgIGVsc2U6CiAgICAgICAgZm9sZGVybmFtZSA9IG9zLnBhdGguam9pbihzbmFwc2hvdF9kaXIsICIlc18lcyIgJSAodGltZS5zdHJmdGltZSgiJVktJW0tJWRfJUglTSVTIiksIHNvY2tldC5nZXRob3N0bmFtZSgpKSkKICAgICAgICBkc3QgPSBhcmNoaXZlX2ZvbGRlcihmb2xkZXJuYW1lLCBpbnN0YWxsX2RpcikKCiAgICBpZiBjb2RlX29ubHk6CiAgICAgICAgY29weXRyZWUoaW5zdGFsbF9kaXIsIGRzdCwgWycqLm0nLCAnKi5weSddKQogICAgZWxzZToKICAgICAgICBjb3B5dHJlZShpbnN0YWxsX2RpciwgZHN0LCBbJyoubScsICcqLnB5JywgJyoud2F2JywgJyoucG5nJywgJyouanBnJywgJyoubWQnXSwgWyd0bXAnXSkKCmRlZiBjb3B5dHJlZShzcmMsIGRzdCwgcGF0dGVybnMsIGV4Y2x1ZGU9W10pOgogICAgIyBwYXR0ZXJucyBhcmUgaW5jbHVkZWQKICAgIGZvciAoZGlycGF0aCwgZGlybmFtZXMsIGZpbGVuYW1lcykgaW4gb3Mud2FsayhzcmMpOgogICAgICAgIGRvX3RoaXNfZGlycGF0aCA9IFRydWUKICAgICAgICBmb3IgcCBpbiBkaXJwYXRoLnJlcGxhY2UoZHN0LnBhdGhfbWFuZ2xlLCAnJykuc3BsaXQob3Muc2VwKToKICAgICAgICAgICAgaWYgcCBpbiBleGNsdWRlOgogICAgICAgICAgICAgICAgZG9fdGhpc19kaXJwYXRoID0gRmFsc2UKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgaWYgbm90IGRvX3RoaXNfZGlycGF0aDoKICAgICAgICAgICAgY29udGludWUKICAgICAgICBmb3IgZiBpbiBmaWxlbmFtZXM6CiAgICAgICAgICAgIGZvciBwIGluIHBhdHRlcm5zOgogICAgICAgICAgICAgICAgaWYgZm5tYXRjaC5mbm1hdGNoKGYsIHApOgogICAgICAgICAgICAgICAgICAgIGRzdC5hZGQob3MucGF0aC5qb2luKGRpcnBhdGgsIGYpKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCgpkZWYgaW5zdGFsbChzcmMsIGRzdCk6CiAgICBsb2cgPSBbXQogICAgZXJyb3JzID0gW10KICAgICMgSWYgZHN0IGlzIG5vdCBlbXB0eSwgd2UgdGFrZSBhIHNuYXBzaG90CiAgICBpZiBvcy5wYXRoLmlzZGlyKGRzdCkgYW5kIGxlbihvcy5saXN0ZGlyKGRzdCkpPjA6CiAgICAgICAgbG9nLmFwcGVuZCgnVGhlIHRhcmdldCBkaXJlY3RvcnkgIiVzIiBhbHJlYWR5IGV4aXN0cyBhbmQgaXMgbm90IGVtcHR5LCBzbyB3ZSBhcmUgdGFraW5nIGEgc25hcHNob3Qgb2YgaXQuJyAlIGRzdCkKICAgICAgICBzbmFwc2hvdF9kaXIgPSBvcy5wYXRoLmpvaW4oc3JjLCAnU25hcHNob3RzJykKICAgICAgICBpZiBub3Qgb3MucGF0aC5pc2RpcihzbmFwc2hvdF9kaXIpOgogICAgICAgICAgICBvcy5tYWtlZGlycyhzbmFwc2hvdF9kaXIpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBsb2cuYXBwZW5kKCdUYWtpbmcgYSBzbmFwc2hvdCBvZiAiJXMiIHRvICIlcyIuLi4nICUgKGRzdCwgc25hcHNob3RfZGlyKSkKICAgICAgICAgICAgc25hcHNob3QoZHN0LCBzbmFwc2hvdF9kaXIsIEZhbHNlLCBUcnVlKQogICAgICAgICAgICBsb2cuYXBwZW5kKCdTbmFwc2hvdCBkb25lLicpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiwgZToKICAgICAgICAgICAgbG9nLmFwcGVuZCgiVGhlIHNuYXBzaG90IG9mIFwiJXNcIiBjb3VsZG4ndCBiZSB0YWtlbi4uLiIpCiAgICAgICAgICAgIGVycm9ycy5hcHBlbmQoZSkKICAgICAgICAgICAgcmV0dXJuIGxvZywgZXJyb3JzCgogICAgZHN0YSA9IGFyY2hpdmVfZm9sZGVyKGRzdCwgc3JjKQogICAgdHJ5OgogICAgICAgIGxvZy5hcHBlbmQoIkNvcHlpbmcgZmlsZXMgZnJvbSBcIiVzXCIgdG8gXCIlc1wiLi4uIiAlIChzcmMsZHN0KSkKICAgICAgICBjb3B5dHJlZShzcmMsIGRzdGEsIFsnKi5tJywgJyoucHknLCAnKi53YXYnLCAnKi5wbmcnLCAnKi5qcGcnLCAnKi5tZCddLCBbJ3RtcCddKQogICAgICAgIGxvZy5hcHBlbmQoJ1RoZSBjb3B5IGhhcyBzdWNjZWVkZWQuJykKICAgIGV4Y2VwdCBFeGNlcHRpb24sZToKICAgICAgICBsb2cuYXBwZW5kKCJBbiBlcnJvciBvY2N1cmVkIGR1cmluZyB0aGUgY29weS4iKQogICAgICAgIGVycm9ycy5hcHBlbmQoZSkKCiAgICByZXR1cm4gbG9nLCBlcnJvcnMKCgojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpkZWYgbWFpbihhcmd2KToKCiAgICAjIFRlc3Qgb2YgdGhlIGZ1bmN0aW9ucwogICAgIyBzcmMgPSBvcy5wYXRoLmV4cGFuZHVzZXIoIn4vU291cmNlcy90bXAvdGVzdF9waWNrYV9zbmFwc2hvdHMvc3JjIikKICAgICMgZHN0ID0gb3MucGF0aC5leHBhbmR1c2VyKCJ+L1NvdXJjZXMvdG1wL3Rlc3RfcGlja2Ffc25hcHNob3RzL3NuYXBzaG90cyIpCiAgICAjIHNuYXBzaG90KHNyYywgZHN0LCBGYWxzZSwgRmFsc2UpCgogICAgaWYgbGVuKGFyZ3YpPDM6CiAgICAgICAgcHJpbnQgIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBjb21tYW5kIGZvbGxvd2VkIGJ5IHR3byBwYXRoIG5hbWVzLiIKICAgICAgICBleGl0KDEpCgogICAgaWYgYXJndlswXSBub3QgaW4gWydpbnN0YWxsJywgJ3NuYXBzaG90J106CiAgICAgICAgcHJpbnQgIlRoZSB2YWxpZCBjb21tYW5kcyBhcmUgJ2luc3RhbGwnIGFuZCAnc25hcHNob3QnLiIKICAgICAgICBleGl0KDEpCgogICAgaWYgYXJndlswXT09J2luc3RhbGwnOgogICAgICAgIGxvZywgZXJyb3JzID0gaW5zdGFsbChhcmd2WzFdLCBhcmd2WzJdKQogICAgICAgIHByaW50ICJcbiIuam9pbihsb2cpCiAgICAgICAgaWYgbGVuKGVycm9ycyk+MDoKICAgICAgICAgICAgcHJpbnQgIi0tLUVycm9yczoiCiAgICAgICAgICAgIHByaW50ICJcbiIuam9pbihbc3RyKGUpIGZvciBlIGluIGVycm9yc10pCiAgICAgICAgICAgIGV4aXQoMSkKICAgIGVsaWYgYXJndlswXT09J3NuYXBzaG90JzoKICAgICAgICBzbmFwc2hvdChhcmd2WzFdLCBhcmd2WzJdKQoKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKaWYgX19uYW1lX189PSdfX21haW5fXyc6CiAgICBtYWluKHN5cy5hcmd2WzE6XSkK';
